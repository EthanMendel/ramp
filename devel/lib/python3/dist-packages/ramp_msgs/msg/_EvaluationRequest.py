# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ramp_msgs/EvaluationRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import ramp_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class EvaluationRequest(genpy.Message):
  _md5sum = "8964e17c705f63c522df77b43636a204"
  _type = "ramp_msgs/EvaluationRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """RampTrajectory trajectory
float64 currentTheta
float64 theta_cc
RampTrajectory[] obstacle_trjs
bool imminent_collision
float64 coll_dist
float64 offset
bool full_eval

bool consider_trans
bool trans_possible

================================================================================
MSG: ramp_msgs/RampTrajectory
Header header
uint16 id
trajectory_msgs/JointTrajectory trajectory
uint16[] i_knotPoints
ramp_msgs/BezierCurve[] curves
ramp_msgs/Path holonomic_path

bool feasible
float64 fitness

duration t_firstCollision
int8 i_subPopulation

duration t_start

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: ramp_msgs/BezierCurve
Header header

ramp_msgs/MotionState[] points
float64[] u_values

ramp_msgs/MotionState[] segmentPoints
ramp_msgs/MotionState[] controlPoints

float64 l
ramp_msgs/MotionState ms_maxVA
ramp_msgs/MotionState ms_initialVA
ramp_msgs/MotionState ms_begin
float64 u_0
float64 u_dot_0
float64 u_dot_max
float64 u_target

================================================================================
MSG: ramp_msgs/MotionState
float64[] positions
float64[] velocities
float64[] accelerations
float64[] jerks

# change to duration
float64 time

================================================================================
MSG: ramp_msgs/Path
ramp_msgs/KnotPoint[] points

================================================================================
MSG: ramp_msgs/KnotPoint
ramp_msgs/MotionState motionState
uint32 stopTime
"""
  __slots__ = ['trajectory','currentTheta','theta_cc','obstacle_trjs','imminent_collision','coll_dist','offset','full_eval','consider_trans','trans_possible']
  _slot_types = ['ramp_msgs/RampTrajectory','float64','float64','ramp_msgs/RampTrajectory[]','bool','float64','float64','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectory,currentTheta,theta_cc,obstacle_trjs,imminent_collision,coll_dist,offset,full_eval,consider_trans,trans_possible

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EvaluationRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.trajectory is None:
        self.trajectory = ramp_msgs.msg.RampTrajectory()
      if self.currentTheta is None:
        self.currentTheta = 0.
      if self.theta_cc is None:
        self.theta_cc = 0.
      if self.obstacle_trjs is None:
        self.obstacle_trjs = []
      if self.imminent_collision is None:
        self.imminent_collision = False
      if self.coll_dist is None:
        self.coll_dist = 0.
      if self.offset is None:
        self.offset = 0.
      if self.full_eval is None:
        self.full_eval = False
      if self.consider_trans is None:
        self.consider_trans = False
      if self.trans_possible is None:
        self.trans_possible = False
    else:
      self.trajectory = ramp_msgs.msg.RampTrajectory()
      self.currentTheta = 0.
      self.theta_cc = 0.
      self.obstacle_trjs = []
      self.imminent_collision = False
      self.coll_dist = 0.
      self.offset = 0.
      self.full_eval = False
      self.consider_trans = False
      self.trans_possible = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs))
      _x = self.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H3I().pack(_x.trajectory.id, _x.trajectory.trajectory.header.seq, _x.trajectory.trajectory.header.stamp.secs, _x.trajectory.trajectory.header.stamp.nsecs))
      _x = self.trajectory.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.trajectory.trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.trajectory.trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.accelerations))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.effort))
        _v1 = val1.time_from_start
        _x = _v1
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory.i_knotPoints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.trajectory.i_knotPoints))
      length = len(self.trajectory.curves)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.curves:
        _v2 = val1.header
        _x = _v2.seq
        buff.write(_get_struct_I().pack(_x))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.positions))
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.velocities))
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.accelerations))
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.jerks))
          _x = val2.time
          buff.write(_get_struct_d().pack(_x))
        length = len(val1.u_values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.u_values))
        length = len(val1.segmentPoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.segmentPoints:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.positions))
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.velocities))
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.accelerations))
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.jerks))
          _x = val2.time
          buff.write(_get_struct_d().pack(_x))
        length = len(val1.controlPoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.controlPoints:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.positions))
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.velocities))
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.accelerations))
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.jerks))
          _x = val2.time
          buff.write(_get_struct_d().pack(_x))
        _x = val1.l
        buff.write(_get_struct_d().pack(_x))
        _v4 = val1.ms_maxVA
        length = len(_v4.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v4.positions))
        length = len(_v4.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v4.velocities))
        length = len(_v4.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v4.accelerations))
        length = len(_v4.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v4.jerks))
        _x = _v4.time
        buff.write(_get_struct_d().pack(_x))
        _v5 = val1.ms_initialVA
        length = len(_v5.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v5.positions))
        length = len(_v5.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v5.velocities))
        length = len(_v5.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v5.accelerations))
        length = len(_v5.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v5.jerks))
        _x = _v5.time
        buff.write(_get_struct_d().pack(_x))
        _v6 = val1.ms_begin
        length = len(_v6.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v6.positions))
        length = len(_v6.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v6.velocities))
        length = len(_v6.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v6.accelerations))
        length = len(_v6.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v6.jerks))
        _x = _v6.time
        buff.write(_get_struct_d().pack(_x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target))
      length = len(self.trajectory.holonomic_path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.holonomic_path.points:
        _v7 = val1.motionState
        length = len(_v7.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v7.positions))
        length = len(_v7.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v7.velocities))
        length = len(_v7.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v7.accelerations))
        length = len(_v7.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v7.jerks))
        _x = _v7.time
        buff.write(_get_struct_d().pack(_x))
        _x = val1.stopTime
        buff.write(_get_struct_I().pack(_x))
      _x = self
      buff.write(_get_struct_Bd2ib2i2d().pack(_x.trajectory.feasible, _x.trajectory.fitness, _x.trajectory.t_firstCollision.secs, _x.trajectory.t_firstCollision.nsecs, _x.trajectory.i_subPopulation, _x.trajectory.t_start.secs, _x.trajectory.t_start.nsecs, _x.currentTheta, _x.theta_cc))
      length = len(self.obstacle_trjs)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle_trjs:
        _v8 = val1.header
        _x = _v8.seq
        buff.write(_get_struct_I().pack(_x))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_H().pack(_x))
        _v10 = val1.trajectory
        _v11 = _v10.header
        _x = _v11.seq
        buff.write(_get_struct_I().pack(_x))
        _v12 = _v11.stamp
        _x = _v12
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v11.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v10.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v10.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v10.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v10.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v13 = val3.time_from_start
          _x = _v13
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        length = len(val1.i_knotPoints)
        buff.write(_struct_I.pack(length))
        pattern = '<%sH'%length
        buff.write(struct.Struct(pattern).pack(*val1.i_knotPoints))
        length = len(val1.curves)
        buff.write(_struct_I.pack(length))
        for val2 in val1.curves:
          _v14 = val2.header
          _x = _v14.seq
          buff.write(_get_struct_I().pack(_x))
          _v15 = _v14.stamp
          _x = _v15
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v14.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.positions))
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.velocities))
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.accelerations))
            length = len(val3.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.jerks))
            _x = val3.time
            buff.write(_get_struct_d().pack(_x))
          length = len(val2.u_values)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.u_values))
          length = len(val2.segmentPoints)
          buff.write(_struct_I.pack(length))
          for val3 in val2.segmentPoints:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.positions))
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.velocities))
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.accelerations))
            length = len(val3.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.jerks))
            _x = val3.time
            buff.write(_get_struct_d().pack(_x))
          length = len(val2.controlPoints)
          buff.write(_struct_I.pack(length))
          for val3 in val2.controlPoints:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.positions))
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.velocities))
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.accelerations))
            length = len(val3.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.jerks))
            _x = val3.time
            buff.write(_get_struct_d().pack(_x))
          _x = val2.l
          buff.write(_get_struct_d().pack(_x))
          _v16 = val2.ms_maxVA
          length = len(_v16.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v16.positions))
          length = len(_v16.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v16.velocities))
          length = len(_v16.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v16.accelerations))
          length = len(_v16.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v16.jerks))
          _x = _v16.time
          buff.write(_get_struct_d().pack(_x))
          _v17 = val2.ms_initialVA
          length = len(_v17.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v17.positions))
          length = len(_v17.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v17.velocities))
          length = len(_v17.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v17.accelerations))
          length = len(_v17.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v17.jerks))
          _x = _v17.time
          buff.write(_get_struct_d().pack(_x))
          _v18 = val2.ms_begin
          length = len(_v18.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v18.positions))
          length = len(_v18.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v18.velocities))
          length = len(_v18.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v18.accelerations))
          length = len(_v18.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v18.jerks))
          _x = _v18.time
          buff.write(_get_struct_d().pack(_x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target))
        _v19 = val1.holonomic_path
        length = len(_v19.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.points:
          _v20 = val3.motionState
          length = len(_v20.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v20.positions))
          length = len(_v20.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v20.velocities))
          length = len(_v20.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v20.accelerations))
          length = len(_v20.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v20.jerks))
          _x = _v20.time
          buff.write(_get_struct_d().pack(_x))
          _x = val3.stopTime
          buff.write(_get_struct_I().pack(_x))
        _x = val1
        buff.write(_get_struct_Bd().pack(_x.feasible, _x.fitness))
        _v21 = val1.t_firstCollision
        _x = _v21
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.i_subPopulation
        buff.write(_get_struct_b().pack(_x))
        _v22 = val1.t_start
        _x = _v22
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_B2d3B().pack(_x.imminent_collision, _x.coll_dist, _x.offset, _x.full_eval, _x.consider_trans, _x.trans_possible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory is None:
        self.trajectory = ramp_msgs.msg.RampTrajectory()
      if self.obstacle_trjs is None:
        self.obstacle_trjs = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trajectory.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.trajectory.id, _x.trajectory.trajectory.header.seq, _x.trajectory.trajectory.header.stamp.secs, _x.trajectory.trajectory.header.stamp.nsecs,) = _get_struct_H3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.trajectory.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trajectory.trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.trajectory.trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.positions = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocities = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.accelerations = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.effort = s.unpack(str[start:end])
        _v23 = val1.time_from_start
        _x = _v23
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.trajectory.trajectory.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.trajectory.i_knotPoints = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.curves = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.BezierCurve()
        _v24 = val1.header
        start = end
        end += 4
        (_v24.seq,) = _get_struct_I().unpack(str[start:end])
        _v25 = _v24.stamp
        _x = _v25
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v24.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v24.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.jerks = s.unpack(str[start:end])
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.u_values = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.segmentPoints = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.jerks = s.unpack(str[start:end])
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.segmentPoints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.controlPoints = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.jerks = s.unpack(str[start:end])
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.controlPoints.append(val2)
        start = end
        end += 8
        (val1.l,) = _get_struct_d().unpack(str[start:end])
        _v26 = val1.ms_maxVA
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v26.positions = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v26.velocities = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v26.accelerations = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v26.jerks = s.unpack(str[start:end])
        start = end
        end += 8
        (_v26.time,) = _get_struct_d().unpack(str[start:end])
        _v27 = val1.ms_initialVA
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v27.positions = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v27.velocities = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v27.accelerations = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v27.jerks = s.unpack(str[start:end])
        start = end
        end += 8
        (_v27.time,) = _get_struct_d().unpack(str[start:end])
        _v28 = val1.ms_begin
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v28.positions = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v28.velocities = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v28.accelerations = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v28.jerks = s.unpack(str[start:end])
        start = end
        end += 8
        (_v28.time,) = _get_struct_d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target,) = _get_struct_4d().unpack(str[start:end])
        self.trajectory.curves.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.holonomic_path.points = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.KnotPoint()
        _v29 = val1.motionState
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v29.positions = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v29.velocities = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v29.accelerations = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v29.jerks = s.unpack(str[start:end])
        start = end
        end += 8
        (_v29.time,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (val1.stopTime,) = _get_struct_I().unpack(str[start:end])
        self.trajectory.holonomic_path.points.append(val1)
      _x = self
      start = end
      end += 42
      (_x.trajectory.feasible, _x.trajectory.fitness, _x.trajectory.t_firstCollision.secs, _x.trajectory.t_firstCollision.nsecs, _x.trajectory.i_subPopulation, _x.trajectory.t_start.secs, _x.trajectory.t_start.nsecs, _x.currentTheta, _x.theta_cc,) = _get_struct_Bd2ib2i2d().unpack(str[start:end])
      self.trajectory.feasible = bool(self.trajectory.feasible)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle_trjs = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.RampTrajectory()
        _v30 = val1.header
        start = end
        end += 4
        (_v30.seq,) = _get_struct_I().unpack(str[start:end])
        _v31 = _v30.stamp
        _x = _v31
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v30.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v30.frame_id = str[start:end]
        start = end
        end += 2
        (val1.id,) = _get_struct_H().unpack(str[start:end])
        _v32 = val1.trajectory
        _v33 = _v32.header
        start = end
        end += 4
        (_v33.seq,) = _get_struct_I().unpack(str[start:end])
        _v34 = _v33.stamp
        _x = _v34
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v33.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v33.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v32.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v32.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v32.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v35 = val3.time_from_start
          _x = _v35
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v32.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sH'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.i_knotPoints = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.curves = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.BezierCurve()
          _v36 = val2.header
          start = end
          end += 4
          (_v36.seq,) = _get_struct_I().unpack(str[start:end])
          _v37 = _v36.stamp
          _x = _v37
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v36.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v36.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.positions = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.velocities = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.accelerations = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.jerks = s.unpack(str[start:end])
            start = end
            end += 8
            (val3.time,) = _get_struct_d().unpack(str[start:end])
            val2.points.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.u_values = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.segmentPoints = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.positions = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.velocities = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.accelerations = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.jerks = s.unpack(str[start:end])
            start = end
            end += 8
            (val3.time,) = _get_struct_d().unpack(str[start:end])
            val2.segmentPoints.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.controlPoints = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.positions = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.velocities = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.accelerations = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.jerks = s.unpack(str[start:end])
            start = end
            end += 8
            (val3.time,) = _get_struct_d().unpack(str[start:end])
            val2.controlPoints.append(val3)
          start = end
          end += 8
          (val2.l,) = _get_struct_d().unpack(str[start:end])
          _v38 = val2.ms_maxVA
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v38.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v38.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v38.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v38.jerks = s.unpack(str[start:end])
          start = end
          end += 8
          (_v38.time,) = _get_struct_d().unpack(str[start:end])
          _v39 = val2.ms_initialVA
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v39.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v39.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v39.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v39.jerks = s.unpack(str[start:end])
          start = end
          end += 8
          (_v39.time,) = _get_struct_d().unpack(str[start:end])
          _v40 = val2.ms_begin
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v40.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v40.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v40.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v40.jerks = s.unpack(str[start:end])
          start = end
          end += 8
          (_v40.time,) = _get_struct_d().unpack(str[start:end])
          _x = val2
          start = end
          end += 32
          (_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target,) = _get_struct_4d().unpack(str[start:end])
          val1.curves.append(val2)
        _v41 = val1.holonomic_path
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v41.points = []
        for i in range(0, length):
          val3 = ramp_msgs.msg.KnotPoint()
          _v42 = val3.motionState
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v42.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v42.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v42.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v42.jerks = s.unpack(str[start:end])
          start = end
          end += 8
          (_v42.time,) = _get_struct_d().unpack(str[start:end])
          start = end
          end += 4
          (val3.stopTime,) = _get_struct_I().unpack(str[start:end])
          _v41.points.append(val3)
        _x = val1
        start = end
        end += 9
        (_x.feasible, _x.fitness,) = _get_struct_Bd().unpack(str[start:end])
        val1.feasible = bool(val1.feasible)
        _v43 = val1.t_firstCollision
        _x = _v43
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 1
        (val1.i_subPopulation,) = _get_struct_b().unpack(str[start:end])
        _v44 = val1.t_start
        _x = _v44
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.obstacle_trjs.append(val1)
      _x = self
      start = end
      end += 20
      (_x.imminent_collision, _x.coll_dist, _x.offset, _x.full_eval, _x.consider_trans, _x.trans_possible,) = _get_struct_B2d3B().unpack(str[start:end])
      self.imminent_collision = bool(self.imminent_collision)
      self.full_eval = bool(self.full_eval)
      self.consider_trans = bool(self.consider_trans)
      self.trans_possible = bool(self.trans_possible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs))
      _x = self.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H3I().pack(_x.trajectory.id, _x.trajectory.trajectory.header.seq, _x.trajectory.trajectory.header.stamp.secs, _x.trajectory.trajectory.header.stamp.nsecs))
      _x = self.trajectory.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.trajectory.trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.trajectory.trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
        _v45 = val1.time_from_start
        _x = _v45
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory.i_knotPoints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.trajectory.i_knotPoints.tostring())
      length = len(self.trajectory.curves)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.curves:
        _v46 = val1.header
        _x = _v46.seq
        buff.write(_get_struct_I().pack(_x))
        _v47 = _v46.stamp
        _x = _v47
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v46.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.positions.tostring())
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.velocities.tostring())
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.accelerations.tostring())
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.jerks.tostring())
          _x = val2.time
          buff.write(_get_struct_d().pack(_x))
        length = len(val1.u_values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.u_values.tostring())
        length = len(val1.segmentPoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.segmentPoints:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.positions.tostring())
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.velocities.tostring())
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.accelerations.tostring())
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.jerks.tostring())
          _x = val2.time
          buff.write(_get_struct_d().pack(_x))
        length = len(val1.controlPoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.controlPoints:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.positions.tostring())
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.velocities.tostring())
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.accelerations.tostring())
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.jerks.tostring())
          _x = val2.time
          buff.write(_get_struct_d().pack(_x))
        _x = val1.l
        buff.write(_get_struct_d().pack(_x))
        _v48 = val1.ms_maxVA
        length = len(_v48.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v48.positions.tostring())
        length = len(_v48.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v48.velocities.tostring())
        length = len(_v48.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v48.accelerations.tostring())
        length = len(_v48.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v48.jerks.tostring())
        _x = _v48.time
        buff.write(_get_struct_d().pack(_x))
        _v49 = val1.ms_initialVA
        length = len(_v49.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v49.positions.tostring())
        length = len(_v49.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v49.velocities.tostring())
        length = len(_v49.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v49.accelerations.tostring())
        length = len(_v49.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v49.jerks.tostring())
        _x = _v49.time
        buff.write(_get_struct_d().pack(_x))
        _v50 = val1.ms_begin
        length = len(_v50.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v50.positions.tostring())
        length = len(_v50.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v50.velocities.tostring())
        length = len(_v50.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v50.accelerations.tostring())
        length = len(_v50.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v50.jerks.tostring())
        _x = _v50.time
        buff.write(_get_struct_d().pack(_x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target))
      length = len(self.trajectory.holonomic_path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.holonomic_path.points:
        _v51 = val1.motionState
        length = len(_v51.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v51.positions.tostring())
        length = len(_v51.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v51.velocities.tostring())
        length = len(_v51.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v51.accelerations.tostring())
        length = len(_v51.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v51.jerks.tostring())
        _x = _v51.time
        buff.write(_get_struct_d().pack(_x))
        _x = val1.stopTime
        buff.write(_get_struct_I().pack(_x))
      _x = self
      buff.write(_get_struct_Bd2ib2i2d().pack(_x.trajectory.feasible, _x.trajectory.fitness, _x.trajectory.t_firstCollision.secs, _x.trajectory.t_firstCollision.nsecs, _x.trajectory.i_subPopulation, _x.trajectory.t_start.secs, _x.trajectory.t_start.nsecs, _x.currentTheta, _x.theta_cc))
      length = len(self.obstacle_trjs)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle_trjs:
        _v52 = val1.header
        _x = _v52.seq
        buff.write(_get_struct_I().pack(_x))
        _v53 = _v52.stamp
        _x = _v53
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v52.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_H().pack(_x))
        _v54 = val1.trajectory
        _v55 = _v54.header
        _x = _v55.seq
        buff.write(_get_struct_I().pack(_x))
        _v56 = _v55.stamp
        _x = _v56
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v55.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v54.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v54.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v54.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v54.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v57 = val3.time_from_start
          _x = _v57
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        length = len(val1.i_knotPoints)
        buff.write(_struct_I.pack(length))
        pattern = '<%sH'%length
        buff.write(val1.i_knotPoints.tostring())
        length = len(val1.curves)
        buff.write(_struct_I.pack(length))
        for val2 in val1.curves:
          _v58 = val2.header
          _x = _v58.seq
          buff.write(_get_struct_I().pack(_x))
          _v59 = _v58.stamp
          _x = _v59
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v58.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.positions.tostring())
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.velocities.tostring())
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.accelerations.tostring())
            length = len(val3.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.jerks.tostring())
            _x = val3.time
            buff.write(_get_struct_d().pack(_x))
          length = len(val2.u_values)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.u_values.tostring())
          length = len(val2.segmentPoints)
          buff.write(_struct_I.pack(length))
          for val3 in val2.segmentPoints:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.positions.tostring())
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.velocities.tostring())
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.accelerations.tostring())
            length = len(val3.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.jerks.tostring())
            _x = val3.time
            buff.write(_get_struct_d().pack(_x))
          length = len(val2.controlPoints)
          buff.write(_struct_I.pack(length))
          for val3 in val2.controlPoints:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.positions.tostring())
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.velocities.tostring())
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.accelerations.tostring())
            length = len(val3.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.jerks.tostring())
            _x = val3.time
            buff.write(_get_struct_d().pack(_x))
          _x = val2.l
          buff.write(_get_struct_d().pack(_x))
          _v60 = val2.ms_maxVA
          length = len(_v60.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v60.positions.tostring())
          length = len(_v60.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v60.velocities.tostring())
          length = len(_v60.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v60.accelerations.tostring())
          length = len(_v60.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v60.jerks.tostring())
          _x = _v60.time
          buff.write(_get_struct_d().pack(_x))
          _v61 = val2.ms_initialVA
          length = len(_v61.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v61.positions.tostring())
          length = len(_v61.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v61.velocities.tostring())
          length = len(_v61.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v61.accelerations.tostring())
          length = len(_v61.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v61.jerks.tostring())
          _x = _v61.time
          buff.write(_get_struct_d().pack(_x))
          _v62 = val2.ms_begin
          length = len(_v62.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v62.positions.tostring())
          length = len(_v62.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v62.velocities.tostring())
          length = len(_v62.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v62.accelerations.tostring())
          length = len(_v62.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v62.jerks.tostring())
          _x = _v62.time
          buff.write(_get_struct_d().pack(_x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target))
        _v63 = val1.holonomic_path
        length = len(_v63.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v63.points:
          _v64 = val3.motionState
          length = len(_v64.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v64.positions.tostring())
          length = len(_v64.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v64.velocities.tostring())
          length = len(_v64.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v64.accelerations.tostring())
          length = len(_v64.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v64.jerks.tostring())
          _x = _v64.time
          buff.write(_get_struct_d().pack(_x))
          _x = val3.stopTime
          buff.write(_get_struct_I().pack(_x))
        _x = val1
        buff.write(_get_struct_Bd().pack(_x.feasible, _x.fitness))
        _v65 = val1.t_firstCollision
        _x = _v65
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.i_subPopulation
        buff.write(_get_struct_b().pack(_x))
        _v66 = val1.t_start
        _x = _v66
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_B2d3B().pack(_x.imminent_collision, _x.coll_dist, _x.offset, _x.full_eval, _x.consider_trans, _x.trans_possible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory is None:
        self.trajectory = ramp_msgs.msg.RampTrajectory()
      if self.obstacle_trjs is None:
        self.obstacle_trjs = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trajectory.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.trajectory.id, _x.trajectory.trajectory.header.seq, _x.trajectory.trajectory.header.stamp.secs, _x.trajectory.trajectory.header.stamp.nsecs,) = _get_struct_H3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.trajectory.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trajectory.trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.trajectory.trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v67 = val1.time_from_start
        _x = _v67
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.trajectory.trajectory.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.trajectory.i_knotPoints = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.curves = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.BezierCurve()
        _v68 = val1.header
        start = end
        end += 4
        (_v68.seq,) = _get_struct_I().unpack(str[start:end])
        _v69 = _v68.stamp
        _x = _v69
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v68.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v68.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.u_values = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.segmentPoints = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.segmentPoints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.controlPoints = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.controlPoints.append(val2)
        start = end
        end += 8
        (val1.l,) = _get_struct_d().unpack(str[start:end])
        _v70 = val1.ms_maxVA
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v70.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v70.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v70.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v70.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 8
        (_v70.time,) = _get_struct_d().unpack(str[start:end])
        _v71 = val1.ms_initialVA
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v71.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v71.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v71.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v71.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 8
        (_v71.time,) = _get_struct_d().unpack(str[start:end])
        _v72 = val1.ms_begin
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v72.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v72.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v72.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v72.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 8
        (_v72.time,) = _get_struct_d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target,) = _get_struct_4d().unpack(str[start:end])
        self.trajectory.curves.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.holonomic_path.points = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.KnotPoint()
        _v73 = val1.motionState
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v73.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v73.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v73.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v73.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 8
        (_v73.time,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (val1.stopTime,) = _get_struct_I().unpack(str[start:end])
        self.trajectory.holonomic_path.points.append(val1)
      _x = self
      start = end
      end += 42
      (_x.trajectory.feasible, _x.trajectory.fitness, _x.trajectory.t_firstCollision.secs, _x.trajectory.t_firstCollision.nsecs, _x.trajectory.i_subPopulation, _x.trajectory.t_start.secs, _x.trajectory.t_start.nsecs, _x.currentTheta, _x.theta_cc,) = _get_struct_Bd2ib2i2d().unpack(str[start:end])
      self.trajectory.feasible = bool(self.trajectory.feasible)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle_trjs = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.RampTrajectory()
        _v74 = val1.header
        start = end
        end += 4
        (_v74.seq,) = _get_struct_I().unpack(str[start:end])
        _v75 = _v74.stamp
        _x = _v75
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v74.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v74.frame_id = str[start:end]
        start = end
        end += 2
        (val1.id,) = _get_struct_H().unpack(str[start:end])
        _v76 = val1.trajectory
        _v77 = _v76.header
        start = end
        end += 4
        (_v77.seq,) = _get_struct_I().unpack(str[start:end])
        _v78 = _v77.stamp
        _x = _v78
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v77.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v77.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v76.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v76.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v76.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v79 = val3.time_from_start
          _x = _v79
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v76.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sH'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.i_knotPoints = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.curves = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.BezierCurve()
          _v80 = val2.header
          start = end
          end += 4
          (_v80.seq,) = _get_struct_I().unpack(str[start:end])
          _v81 = _v80.stamp
          _x = _v81
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v80.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v80.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 8
            (val3.time,) = _get_struct_d().unpack(str[start:end])
            val2.points.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.u_values = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.segmentPoints = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 8
            (val3.time,) = _get_struct_d().unpack(str[start:end])
            val2.segmentPoints.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.controlPoints = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 8
            (val3.time,) = _get_struct_d().unpack(str[start:end])
            val2.controlPoints.append(val3)
          start = end
          end += 8
          (val2.l,) = _get_struct_d().unpack(str[start:end])
          _v82 = val2.ms_maxVA
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v82.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v82.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v82.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v82.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (_v82.time,) = _get_struct_d().unpack(str[start:end])
          _v83 = val2.ms_initialVA
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v83.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v83.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v83.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v83.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (_v83.time,) = _get_struct_d().unpack(str[start:end])
          _v84 = val2.ms_begin
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v84.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v84.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v84.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v84.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (_v84.time,) = _get_struct_d().unpack(str[start:end])
          _x = val2
          start = end
          end += 32
          (_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target,) = _get_struct_4d().unpack(str[start:end])
          val1.curves.append(val2)
        _v85 = val1.holonomic_path
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v85.points = []
        for i in range(0, length):
          val3 = ramp_msgs.msg.KnotPoint()
          _v86 = val3.motionState
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v86.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v86.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v86.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v86.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (_v86.time,) = _get_struct_d().unpack(str[start:end])
          start = end
          end += 4
          (val3.stopTime,) = _get_struct_I().unpack(str[start:end])
          _v85.points.append(val3)
        _x = val1
        start = end
        end += 9
        (_x.feasible, _x.fitness,) = _get_struct_Bd().unpack(str[start:end])
        val1.feasible = bool(val1.feasible)
        _v87 = val1.t_firstCollision
        _x = _v87
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 1
        (val1.i_subPopulation,) = _get_struct_b().unpack(str[start:end])
        _v88 = val1.t_start
        _x = _v88
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.obstacle_trjs.append(val1)
      _x = self
      start = end
      end += 20
      (_x.imminent_collision, _x.coll_dist, _x.offset, _x.full_eval, _x.consider_trans, _x.trans_possible,) = _get_struct_B2d3B().unpack(str[start:end])
      self.imminent_collision = bool(self.imminent_collision)
      self.full_eval = bool(self.full_eval)
      self.consider_trans = bool(self.consider_trans)
      self.trans_possible = bool(self.trans_possible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B2d3B = None
def _get_struct_B2d3B():
    global _struct_B2d3B
    if _struct_B2d3B is None:
        _struct_B2d3B = struct.Struct("<B2d3B")
    return _struct_B2d3B
_struct_Bd = None
def _get_struct_Bd():
    global _struct_Bd
    if _struct_Bd is None:
        _struct_Bd = struct.Struct("<Bd")
    return _struct_Bd
_struct_Bd2ib2i2d = None
def _get_struct_Bd2ib2i2d():
    global _struct_Bd2ib2i2d
    if _struct_Bd2ib2i2d is None:
        _struct_Bd2ib2i2d = struct.Struct("<Bd2ib2i2d")
    return _struct_Bd2ib2i2d
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_H3I = None
def _get_struct_H3I():
    global _struct_H3I
    if _struct_H3I is None:
        _struct_H3I = struct.Struct("<H3I")
    return _struct_H3I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
