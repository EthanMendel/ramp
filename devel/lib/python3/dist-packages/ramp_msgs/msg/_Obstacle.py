# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ramp_msgs/Obstacle.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import ramp_msgs.msg

class Obstacle(genpy.Message):
  _md5sum = "1c898b42573c16c59c5800c91c7d0b57"
  _type = "ramp_msgs/Obstacle"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ramp_msgs/MotionState ob_ms
geometry_msgs/Transform T_w_odom

================================================================================
MSG: ramp_msgs/MotionState
float64[] positions
float64[] velocities
float64[] accelerations
float64[] jerks

# change to duration
float64 time

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['ob_ms','T_w_odom']
  _slot_types = ['ramp_msgs/MotionState','geometry_msgs/Transform']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ob_ms,T_w_odom

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Obstacle, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ob_ms is None:
        self.ob_ms = ramp_msgs.msg.MotionState()
      if self.T_w_odom is None:
        self.T_w_odom = geometry_msgs.msg.Transform()
    else:
      self.ob_ms = ramp_msgs.msg.MotionState()
      self.T_w_odom = geometry_msgs.msg.Transform()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.ob_ms.positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ob_ms.positions))
      length = len(self.ob_ms.velocities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ob_ms.velocities))
      length = len(self.ob_ms.accelerations)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ob_ms.accelerations))
      length = len(self.ob_ms.jerks)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ob_ms.jerks))
      _x = self
      buff.write(_get_struct_8d().pack(_x.ob_ms.time, _x.T_w_odom.translation.x, _x.T_w_odom.translation.y, _x.T_w_odom.translation.z, _x.T_w_odom.rotation.x, _x.T_w_odom.rotation.y, _x.T_w_odom.rotation.z, _x.T_w_odom.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ob_ms is None:
        self.ob_ms = ramp_msgs.msg.MotionState()
      if self.T_w_odom is None:
        self.T_w_odom = geometry_msgs.msg.Transform()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ob_ms.positions = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ob_ms.velocities = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ob_ms.accelerations = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ob_ms.jerks = s.unpack(str[start:end])
      _x = self
      start = end
      end += 64
      (_x.ob_ms.time, _x.T_w_odom.translation.x, _x.T_w_odom.translation.y, _x.T_w_odom.translation.z, _x.T_w_odom.rotation.x, _x.T_w_odom.rotation.y, _x.T_w_odom.rotation.z, _x.T_w_odom.rotation.w,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.ob_ms.positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ob_ms.positions.tostring())
      length = len(self.ob_ms.velocities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ob_ms.velocities.tostring())
      length = len(self.ob_ms.accelerations)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ob_ms.accelerations.tostring())
      length = len(self.ob_ms.jerks)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ob_ms.jerks.tostring())
      _x = self
      buff.write(_get_struct_8d().pack(_x.ob_ms.time, _x.T_w_odom.translation.x, _x.T_w_odom.translation.y, _x.T_w_odom.translation.z, _x.T_w_odom.rotation.x, _x.T_w_odom.rotation.y, _x.T_w_odom.rotation.z, _x.T_w_odom.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ob_ms is None:
        self.ob_ms = ramp_msgs.msg.MotionState()
      if self.T_w_odom is None:
        self.T_w_odom = geometry_msgs.msg.Transform()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ob_ms.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ob_ms.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ob_ms.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ob_ms.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 64
      (_x.ob_ms.time, _x.T_w_odom.translation.x, _x.T_w_odom.translation.y, _x.T_w_odom.translation.z, _x.T_w_odom.rotation.x, _x.T_w_odom.rotation.y, _x.T_w_odom.rotation.z, _x.T_w_odom.rotation.w,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
