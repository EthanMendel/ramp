# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ramp_planner_new/CubicRepresentation.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ramp_planner_new.msg

class CubicRepresentation(genpy.Message):
  _md5sum = "c2d1d9a1b08eb916588f476cba8feed3"
  _type = "ramp_planner_new/CubicRepresentation"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 order
uint32 numDOF
ramp_planner_new/Coefficient[] coefficients
float64 resolution
bool active
================================================================================
MSG: ramp_planner_new/Coefficient
float64[] values"""
  __slots__ = ['order','numDOF','coefficients','resolution','active']
  _slot_types = ['uint32','uint32','ramp_planner_new/Coefficient[]','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       order,numDOF,coefficients,resolution,active

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CubicRepresentation, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.order is None:
        self.order = 0
      if self.numDOF is None:
        self.numDOF = 0
      if self.coefficients is None:
        self.coefficients = []
      if self.resolution is None:
        self.resolution = 0.
      if self.active is None:
        self.active = False
    else:
      self.order = 0
      self.numDOF = 0
      self.coefficients = []
      self.resolution = 0.
      self.active = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.order, _x.numDOF))
      length = len(self.coefficients)
      buff.write(_struct_I.pack(length))
      for val1 in self.coefficients:
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.values))
      _x = self
      buff.write(_get_struct_dB().pack(_x.resolution, _x.active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.coefficients is None:
        self.coefficients = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.order, _x.numDOF,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.coefficients = []
      for i in range(0, length):
        val1 = ramp_planner_new.msg.Coefficient()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.values = s.unpack(str[start:end])
        self.coefficients.append(val1)
      _x = self
      start = end
      end += 9
      (_x.resolution, _x.active,) = _get_struct_dB().unpack(str[start:end])
      self.active = bool(self.active)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.order, _x.numDOF))
      length = len(self.coefficients)
      buff.write(_struct_I.pack(length))
      for val1 in self.coefficients:
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.values.tostring())
      _x = self
      buff.write(_get_struct_dB().pack(_x.resolution, _x.active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.coefficients is None:
        self.coefficients = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.order, _x.numDOF,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.coefficients = []
      for i in range(0, length):
        val1 = ramp_planner_new.msg.Coefficient()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.values = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.coefficients.append(val1)
      _x = self
      start = end
      end += 9
      (_x.resolution, _x.active,) = _get_struct_dB().unpack(str[start:end])
      self.active = bool(self.active)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_dB = None
def _get_struct_dB():
    global _struct_dB
    if _struct_dB is None:
        _struct_dB = struct.Struct("<dB")
    return _struct_dB
