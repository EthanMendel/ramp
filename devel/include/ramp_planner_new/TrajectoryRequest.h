// Generated by gencpp from file ramp_planner_new/TrajectoryRequest.msg
// DO NOT EDIT!


#ifndef RAMP_PLANNER_NEW_MESSAGE_TRAJECTORYREQUEST_H
#define RAMP_PLANNER_NEW_MESSAGE_TRAJECTORYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ramp_planner_new
{
template <class ContainerAllocator>
struct TrajectoryRequest_
{
  typedef TrajectoryRequest_<ContainerAllocator> Type;

  TrajectoryRequest_()
    : timeNeeded(0)
    , type()  {
    }
  TrajectoryRequest_(const ContainerAllocator& _alloc)
    : timeNeeded(0)
    , type(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _timeNeeded_type;
  _timeNeeded_type timeNeeded;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryRequest_

typedef ::ramp_planner_new::TrajectoryRequest_<std::allocator<void> > TrajectoryRequest;

typedef boost::shared_ptr< ::ramp_planner_new::TrajectoryRequest > TrajectoryRequestPtr;
typedef boost::shared_ptr< ::ramp_planner_new::TrajectoryRequest const> TrajectoryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator1> & lhs, const ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.timeNeeded == rhs.timeNeeded &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator1> & lhs, const ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ramp_planner_new

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e58e2f39ce06e72daff4a24c5879f25";
  }

  static const char* value(const ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e58e2f39ce06e72ULL;
  static const uint64_t static_value2 = 0xdaff4a24c5879f25ULL;
};

template<class ContainerAllocator>
struct DataType< ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ramp_planner_new/TrajectoryRequest";
  }

  static const char* value(const ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 timeNeeded\n"
"string type\n"
;
  }

  static const char* value(const ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeNeeded);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ramp_planner_new::TrajectoryRequest_<ContainerAllocator>& v)
  {
    s << indent << "timeNeeded: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timeNeeded);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAMP_PLANNER_NEW_MESSAGE_TRAJECTORYREQUEST_H
