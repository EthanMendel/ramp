// Generated by gencpp from file ramp_planner_new/TrajectoryRepresentation.msg
// DO NOT EDIT!


#ifndef RAMP_PLANNER_NEW_MESSAGE_TRAJECTORYREPRESENTATION_H
#define RAMP_PLANNER_NEW_MESSAGE_TRAJECTORYREPRESENTATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ramp_planner_new/Coefficient.h>
#include <ramp_planner_new/Coefficient.h>

namespace ramp_planner_new
{
template <class ContainerAllocator>
struct TrajectoryRepresentation_
{
  typedef TrajectoryRepresentation_<ContainerAllocator> Type;

  TrajectoryRepresentation_()
    : order(0)
    , numDOF(0)
    , type()
    , coefficients()
    , uCoefficients()
    , resolution(0.0)
    , active(false)
    , startTime(0.0)
    , totalTime(0.0)  {
    }
  TrajectoryRepresentation_(const ContainerAllocator& _alloc)
    : order(0)
    , numDOF(0)
    , type(_alloc)
    , coefficients(_alloc)
    , uCoefficients(_alloc)
    , resolution(0.0)
    , active(false)
    , startTime(0.0)
    , totalTime(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _order_type;
  _order_type order;

   typedef uint32_t _numDOF_type;
  _numDOF_type numDOF;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::vector< ::ramp_planner_new::Coefficient_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ramp_planner_new::Coefficient_<ContainerAllocator> >::other >  _coefficients_type;
  _coefficients_type coefficients;

   typedef std::vector< ::ramp_planner_new::Coefficient_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ramp_planner_new::Coefficient_<ContainerAllocator> >::other >  _uCoefficients_type;
  _uCoefficients_type uCoefficients;

   typedef double _resolution_type;
  _resolution_type resolution;

   typedef uint8_t _active_type;
  _active_type active;

   typedef double _startTime_type;
  _startTime_type startTime;

   typedef double _totalTime_type;
  _totalTime_type totalTime;





  typedef boost::shared_ptr< ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryRepresentation_

typedef ::ramp_planner_new::TrajectoryRepresentation_<std::allocator<void> > TrajectoryRepresentation;

typedef boost::shared_ptr< ::ramp_planner_new::TrajectoryRepresentation > TrajectoryRepresentationPtr;
typedef boost::shared_ptr< ::ramp_planner_new::TrajectoryRepresentation const> TrajectoryRepresentationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator1> & lhs, const ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator2> & rhs)
{
  return lhs.order == rhs.order &&
    lhs.numDOF == rhs.numDOF &&
    lhs.type == rhs.type &&
    lhs.coefficients == rhs.coefficients &&
    lhs.uCoefficients == rhs.uCoefficients &&
    lhs.resolution == rhs.resolution &&
    lhs.active == rhs.active &&
    lhs.startTime == rhs.startTime &&
    lhs.totalTime == rhs.totalTime;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator1> & lhs, const ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ramp_planner_new

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2fb6a8686a3294d98b86c6717636ecfe";
  }

  static const char* value(const ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2fb6a8686a3294d9ULL;
  static const uint64_t static_value2 = 0x8b86c6717636ecfeULL;
};

template<class ContainerAllocator>
struct DataType< ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ramp_planner_new/TrajectoryRepresentation";
  }

  static const char* value(const ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 order\n"
"uint32 numDOF\n"
"string type\n"
"ramp_planner_new/Coefficient[] coefficients\n"
"ramp_planner_new/Coefficient[] uCoefficients\n"
"float64 resolution\n"
"bool active\n"
"float64 startTime\n"
"float64 totalTime\n"
"================================================================================\n"
"MSG: ramp_planner_new/Coefficient\n"
"float64[] values\n"
;
  }

  static const char* value(const ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.order);
      stream.next(m.numDOF);
      stream.next(m.type);
      stream.next(m.coefficients);
      stream.next(m.uCoefficients);
      stream.next(m.resolution);
      stream.next(m.active);
      stream.next(m.startTime);
      stream.next(m.totalTime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryRepresentation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ramp_planner_new::TrajectoryRepresentation_<ContainerAllocator>& v)
  {
    s << indent << "order: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.order);
    s << indent << "numDOF: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.numDOF);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "coefficients[]" << std::endl;
    for (size_t i = 0; i < v.coefficients.size(); ++i)
    {
      s << indent << "  coefficients[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ramp_planner_new::Coefficient_<ContainerAllocator> >::stream(s, indent + "    ", v.coefficients[i]);
    }
    s << indent << "uCoefficients[]" << std::endl;
    for (size_t i = 0; i < v.uCoefficients.size(); ++i)
    {
      s << indent << "  uCoefficients[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ramp_planner_new::Coefficient_<ContainerAllocator> >::stream(s, indent + "    ", v.uCoefficients[i]);
    }
    s << indent << "resolution: ";
    Printer<double>::stream(s, indent + "  ", v.resolution);
    s << indent << "active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active);
    s << indent << "startTime: ";
    Printer<double>::stream(s, indent + "  ", v.startTime);
    s << indent << "totalTime: ";
    Printer<double>::stream(s, indent + "  ", v.totalTime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAMP_PLANNER_NEW_MESSAGE_TRAJECTORYREPRESENTATION_H
