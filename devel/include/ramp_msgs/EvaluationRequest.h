// Generated by gencpp from file ramp_msgs/EvaluationRequest.msg
// DO NOT EDIT!


#ifndef RAMP_MSGS_MESSAGE_EVALUATIONREQUEST_H
#define RAMP_MSGS_MESSAGE_EVALUATIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ramp_msgs/RampTrajectory.h>
#include <ramp_msgs/RampTrajectory.h>

namespace ramp_msgs
{
template <class ContainerAllocator>
struct EvaluationRequest_
{
  typedef EvaluationRequest_<ContainerAllocator> Type;

  EvaluationRequest_()
    : trajectory()
    , currentTheta(0.0)
    , theta_cc(0.0)
    , obstacle_trjs()
    , imminent_collision(false)
    , coll_dist(0.0)
    , offset(0.0)
    , full_eval(false)
    , consider_trans(false)
    , trans_possible(false)  {
    }
  EvaluationRequest_(const ContainerAllocator& _alloc)
    : trajectory(_alloc)
    , currentTheta(0.0)
    , theta_cc(0.0)
    , obstacle_trjs(_alloc)
    , imminent_collision(false)
    , coll_dist(0.0)
    , offset(0.0)
    , full_eval(false)
    , consider_trans(false)
    , trans_possible(false)  {
  (void)_alloc;
    }



   typedef  ::ramp_msgs::RampTrajectory_<ContainerAllocator>  _trajectory_type;
  _trajectory_type trajectory;

   typedef double _currentTheta_type;
  _currentTheta_type currentTheta;

   typedef double _theta_cc_type;
  _theta_cc_type theta_cc;

   typedef std::vector< ::ramp_msgs::RampTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ramp_msgs::RampTrajectory_<ContainerAllocator> >::other >  _obstacle_trjs_type;
  _obstacle_trjs_type obstacle_trjs;

   typedef uint8_t _imminent_collision_type;
  _imminent_collision_type imminent_collision;

   typedef double _coll_dist_type;
  _coll_dist_type coll_dist;

   typedef double _offset_type;
  _offset_type offset;

   typedef uint8_t _full_eval_type;
  _full_eval_type full_eval;

   typedef uint8_t _consider_trans_type;
  _consider_trans_type consider_trans;

   typedef uint8_t _trans_possible_type;
  _trans_possible_type trans_possible;





  typedef boost::shared_ptr< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct EvaluationRequest_

typedef ::ramp_msgs::EvaluationRequest_<std::allocator<void> > EvaluationRequest;

typedef boost::shared_ptr< ::ramp_msgs::EvaluationRequest > EvaluationRequestPtr;
typedef boost::shared_ptr< ::ramp_msgs::EvaluationRequest const> EvaluationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ramp_msgs::EvaluationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ramp_msgs::EvaluationRequest_<ContainerAllocator1> & lhs, const ::ramp_msgs::EvaluationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.trajectory == rhs.trajectory &&
    lhs.currentTheta == rhs.currentTheta &&
    lhs.theta_cc == rhs.theta_cc &&
    lhs.obstacle_trjs == rhs.obstacle_trjs &&
    lhs.imminent_collision == rhs.imminent_collision &&
    lhs.coll_dist == rhs.coll_dist &&
    lhs.offset == rhs.offset &&
    lhs.full_eval == rhs.full_eval &&
    lhs.consider_trans == rhs.consider_trans &&
    lhs.trans_possible == rhs.trans_possible;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ramp_msgs::EvaluationRequest_<ContainerAllocator1> & lhs, const ::ramp_msgs::EvaluationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ramp_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8964e17c705f63c522df77b43636a204";
  }

  static const char* value(const ::ramp_msgs::EvaluationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8964e17c705f63c5ULL;
  static const uint64_t static_value2 = 0x22df77b43636a204ULL;
};

template<class ContainerAllocator>
struct DataType< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ramp_msgs/EvaluationRequest";
  }

  static const char* value(const ::ramp_msgs::EvaluationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RampTrajectory trajectory\n"
"float64 currentTheta\n"
"float64 theta_cc\n"
"RampTrajectory[] obstacle_trjs\n"
"bool imminent_collision\n"
"float64 coll_dist\n"
"float64 offset\n"
"bool full_eval\n"
"\n"
"bool consider_trans\n"
"bool trans_possible\n"
"\n"
"================================================================================\n"
"MSG: ramp_msgs/RampTrajectory\n"
"Header header\n"
"uint16 id\n"
"trajectory_msgs/JointTrajectory trajectory\n"
"uint16[] i_knotPoints\n"
"ramp_msgs/BezierCurve[] curves\n"
"ramp_msgs/Path holonomic_path\n"
"\n"
"bool feasible\n"
"float64 fitness\n"
"\n"
"duration t_firstCollision\n"
"int8 i_subPopulation\n"
"\n"
"duration t_start\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectory\n"
"Header header\n"
"string[] joint_names\n"
"JointTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
"\n"
"================================================================================\n"
"MSG: ramp_msgs/BezierCurve\n"
"Header header\n"
"\n"
"ramp_msgs/MotionState[] points\n"
"float64[] u_values\n"
"\n"
"ramp_msgs/MotionState[] segmentPoints\n"
"ramp_msgs/MotionState[] controlPoints\n"
"\n"
"float64 l\n"
"ramp_msgs/MotionState ms_maxVA\n"
"ramp_msgs/MotionState ms_initialVA\n"
"ramp_msgs/MotionState ms_begin\n"
"float64 u_0\n"
"float64 u_dot_0\n"
"float64 u_dot_max\n"
"float64 u_target\n"
"\n"
"================================================================================\n"
"MSG: ramp_msgs/MotionState\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] jerks\n"
"\n"
"# change to duration\n"
"float64 time\n"
"\n"
"================================================================================\n"
"MSG: ramp_msgs/Path\n"
"ramp_msgs/KnotPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: ramp_msgs/KnotPoint\n"
"ramp_msgs/MotionState motionState\n"
"uint32 stopTime\n"
;
  }

  static const char* value(const ::ramp_msgs::EvaluationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trajectory);
      stream.next(m.currentTheta);
      stream.next(m.theta_cc);
      stream.next(m.obstacle_trjs);
      stream.next(m.imminent_collision);
      stream.next(m.coll_dist);
      stream.next(m.offset);
      stream.next(m.full_eval);
      stream.next(m.consider_trans);
      stream.next(m.trans_possible);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EvaluationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ramp_msgs::EvaluationRequest_<ContainerAllocator>& v)
  {
    s << indent << "trajectory: ";
    s << std::endl;
    Printer< ::ramp_msgs::RampTrajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory);
    s << indent << "currentTheta: ";
    Printer<double>::stream(s, indent + "  ", v.currentTheta);
    s << indent << "theta_cc: ";
    Printer<double>::stream(s, indent + "  ", v.theta_cc);
    s << indent << "obstacle_trjs[]" << std::endl;
    for (size_t i = 0; i < v.obstacle_trjs.size(); ++i)
    {
      s << indent << "  obstacle_trjs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ramp_msgs::RampTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacle_trjs[i]);
    }
    s << indent << "imminent_collision: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imminent_collision);
    s << indent << "coll_dist: ";
    Printer<double>::stream(s, indent + "  ", v.coll_dist);
    s << indent << "offset: ";
    Printer<double>::stream(s, indent + "  ", v.offset);
    s << indent << "full_eval: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.full_eval);
    s << indent << "consider_trans: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.consider_trans);
    s << indent << "trans_possible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trans_possible);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAMP_MSGS_MESSAGE_EVALUATIONREQUEST_H
