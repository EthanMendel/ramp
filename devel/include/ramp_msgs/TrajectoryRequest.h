// Generated by gencpp from file ramp_msgs/TrajectoryRequest.msg
// DO NOT EDIT!


#ifndef RAMP_MSGS_MESSAGE_TRAJECTORYREQUEST_H
#define RAMP_MSGS_MESSAGE_TRAJECTORYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ramp_msgs/Path.h>
#include <ramp_msgs/BezierCurve.h>

namespace ramp_msgs
{
template <class ContainerAllocator>
struct TrajectoryRequest_
{
  typedef TrajectoryRequest_<ContainerAllocator> Type;

  TrajectoryRequest_()
    : path()
    , type(0)
    , print(false)
    , bezierCurves()
    , segments(0)  {
    }
  TrajectoryRequest_(const ContainerAllocator& _alloc)
    : path(_alloc)
    , type(0)
    , print(false)
    , bezierCurves(_alloc)
    , segments(0)  {
  (void)_alloc;
    }



   typedef  ::ramp_msgs::Path_<ContainerAllocator>  _path_type;
  _path_type path;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _print_type;
  _print_type print;

   typedef std::vector< ::ramp_msgs::BezierCurve_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ramp_msgs::BezierCurve_<ContainerAllocator> >::other >  _bezierCurves_type;
  _bezierCurves_type bezierCurves;

   typedef int8_t _segments_type;
  _segments_type segments;





  typedef boost::shared_ptr< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryRequest_

typedef ::ramp_msgs::TrajectoryRequest_<std::allocator<void> > TrajectoryRequest;

typedef boost::shared_ptr< ::ramp_msgs::TrajectoryRequest > TrajectoryRequestPtr;
typedef boost::shared_ptr< ::ramp_msgs::TrajectoryRequest const> TrajectoryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ramp_msgs::TrajectoryRequest_<ContainerAllocator1> & lhs, const ::ramp_msgs::TrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.path == rhs.path &&
    lhs.type == rhs.type &&
    lhs.print == rhs.print &&
    lhs.bezierCurves == rhs.bezierCurves &&
    lhs.segments == rhs.segments;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ramp_msgs::TrajectoryRequest_<ContainerAllocator1> & lhs, const ::ramp_msgs::TrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ramp_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "90b320ee1b26415bfc5a720e57c91cb0";
  }

  static const char* value(const ::ramp_msgs::TrajectoryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x90b320ee1b26415bULL;
  static const uint64_t static_value2 = 0xfc5a720e57c91cb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ramp_msgs/TrajectoryRequest";
  }

  static const char* value(const ::ramp_msgs::TrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ramp_msgs/Path path\n"
"uint8 type \n"
"bool print\n"
"ramp_msgs/BezierCurve[] bezierCurves\n"
"int8 segments\n"
"\n"
"================================================================================\n"
"MSG: ramp_msgs/Path\n"
"ramp_msgs/KnotPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: ramp_msgs/KnotPoint\n"
"ramp_msgs/MotionState motionState\n"
"uint32 stopTime\n"
"\n"
"================================================================================\n"
"MSG: ramp_msgs/MotionState\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] jerks\n"
"\n"
"# change to duration\n"
"float64 time\n"
"\n"
"================================================================================\n"
"MSG: ramp_msgs/BezierCurve\n"
"Header header\n"
"\n"
"ramp_msgs/MotionState[] points\n"
"float64[] u_values\n"
"\n"
"ramp_msgs/MotionState[] segmentPoints\n"
"ramp_msgs/MotionState[] controlPoints\n"
"\n"
"float64 l\n"
"ramp_msgs/MotionState ms_maxVA\n"
"ramp_msgs/MotionState ms_initialVA\n"
"ramp_msgs/MotionState ms_begin\n"
"float64 u_0\n"
"float64 u_dot_0\n"
"float64 u_dot_max\n"
"float64 u_target\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ramp_msgs::TrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path);
      stream.next(m.type);
      stream.next(m.print);
      stream.next(m.bezierCurves);
      stream.next(m.segments);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ramp_msgs::TrajectoryRequest_<ContainerAllocator>& v)
  {
    s << indent << "path: ";
    s << std::endl;
    Printer< ::ramp_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.path);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "print: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.print);
    s << indent << "bezierCurves[]" << std::endl;
    for (size_t i = 0; i < v.bezierCurves.size(); ++i)
    {
      s << indent << "  bezierCurves[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ramp_msgs::BezierCurve_<ContainerAllocator> >::stream(s, indent + "    ", v.bezierCurves[i]);
    }
    s << indent << "segments: ";
    Printer<int8_t>::stream(s, indent + "  ", v.segments);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAMP_MSGS_MESSAGE_TRAJECTORYREQUEST_H
