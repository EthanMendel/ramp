// Generated by gencpp from file ramp_msgs/ModificationRequestRequest.msg
// DO NOT EDIT!


#ifndef RAMP_MSGS_MESSAGE_MODIFICATIONREQUESTREQUEST_H
#define RAMP_MSGS_MESSAGE_MODIFICATIONREQUESTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ramp_msgs/Path.h>

namespace ramp_msgs
{
template <class ContainerAllocator>
struct ModificationRequestRequest_
{
  typedef ModificationRequestRequest_<ContainerAllocator> Type;

  ModificationRequestRequest_()
    : paths()
    , op()
    , move_dist(0.0)
    , move_dir(0.0)  {
    }
  ModificationRequestRequest_(const ContainerAllocator& _alloc)
    : paths(_alloc)
    , op(_alloc)
    , move_dist(0.0)
    , move_dir(0.0)  {
  (void)_alloc;
    }



   typedef std::vector< ::ramp_msgs::Path_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ramp_msgs::Path_<ContainerAllocator> >::other >  _paths_type;
  _paths_type paths;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _op_type;
  _op_type op;

   typedef double _move_dist_type;
  _move_dist_type move_dist;

   typedef double _move_dir_type;
  _move_dir_type move_dir;





  typedef boost::shared_ptr< ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ModificationRequestRequest_

typedef ::ramp_msgs::ModificationRequestRequest_<std::allocator<void> > ModificationRequestRequest;

typedef boost::shared_ptr< ::ramp_msgs::ModificationRequestRequest > ModificationRequestRequestPtr;
typedef boost::shared_ptr< ::ramp_msgs::ModificationRequestRequest const> ModificationRequestRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator1> & lhs, const ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator2> & rhs)
{
  return lhs.paths == rhs.paths &&
    lhs.op == rhs.op &&
    lhs.move_dist == rhs.move_dist &&
    lhs.move_dir == rhs.move_dir;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator1> & lhs, const ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ramp_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a1d61389648b601b0bb8dc72c5e0625";
  }

  static const char* value(const ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a1d61389648b601ULL;
  static const uint64_t static_value2 = 0xb0bb8dc72c5e0625ULL;
};

template<class ContainerAllocator>
struct DataType< ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ramp_msgs/ModificationRequestRequest";
  }

  static const char* value(const ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Path[] paths\n"
"string op\n"
"float64 move_dist\n"
"float64 move_dir\n"
"\n"
"\n"
"================================================================================\n"
"MSG: ramp_msgs/Path\n"
"ramp_msgs/KnotPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: ramp_msgs/KnotPoint\n"
"ramp_msgs/MotionState motionState\n"
"uint32 stopTime\n"
"\n"
"================================================================================\n"
"MSG: ramp_msgs/MotionState\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] jerks\n"
"\n"
"# change to duration\n"
"float64 time\n"
;
  }

  static const char* value(const ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.paths);
      stream.next(m.op);
      stream.next(m.move_dist);
      stream.next(m.move_dir);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModificationRequestRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ramp_msgs::ModificationRequestRequest_<ContainerAllocator>& v)
  {
    s << indent << "paths[]" << std::endl;
    for (size_t i = 0; i < v.paths.size(); ++i)
    {
      s << indent << "  paths[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ramp_msgs::Path_<ContainerAllocator> >::stream(s, indent + "    ", v.paths[i]);
    }
    s << indent << "op: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.op);
    s << indent << "move_dist: ";
    Printer<double>::stream(s, indent + "  ", v.move_dist);
    s << indent << "move_dir: ";
    Printer<double>::stream(s, indent + "  ", v.move_dir);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAMP_MSGS_MESSAGE_MODIFICATIONREQUESTREQUEST_H
