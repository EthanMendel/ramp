// Generated by gencpp from file ramp_msgs/Obstacle.msg
// DO NOT EDIT!


#ifndef RAMP_MSGS_MESSAGE_OBSTACLE_H
#define RAMP_MSGS_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ramp_msgs/MotionState.h>
#include <geometry_msgs/Transform.h>

namespace ramp_msgs
{
template <class ContainerAllocator>
struct Obstacle_
{
  typedef Obstacle_<ContainerAllocator> Type;

  Obstacle_()
    : ob_ms()
    , T_w_odom()  {
    }
  Obstacle_(const ContainerAllocator& _alloc)
    : ob_ms(_alloc)
    , T_w_odom(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ramp_msgs::MotionState_<ContainerAllocator>  _ob_ms_type;
  _ob_ms_type ob_ms;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _T_w_odom_type;
  _T_w_odom_type T_w_odom;





  typedef boost::shared_ptr< ::ramp_msgs::Obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ramp_msgs::Obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacle_

typedef ::ramp_msgs::Obstacle_<std::allocator<void> > Obstacle;

typedef boost::shared_ptr< ::ramp_msgs::Obstacle > ObstaclePtr;
typedef boost::shared_ptr< ::ramp_msgs::Obstacle const> ObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ramp_msgs::Obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ramp_msgs::Obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ramp_msgs::Obstacle_<ContainerAllocator1> & lhs, const ::ramp_msgs::Obstacle_<ContainerAllocator2> & rhs)
{
  return lhs.ob_ms == rhs.ob_ms &&
    lhs.T_w_odom == rhs.T_w_odom;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ramp_msgs::Obstacle_<ContainerAllocator1> & lhs, const ::ramp_msgs::Obstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ramp_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ramp_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c898b42573c16c59c5800c91c7d0b57";
  }

  static const char* value(const ::ramp_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c898b42573c16c5ULL;
  static const uint64_t static_value2 = 0x9c5800c91c7d0b57ULL;
};

template<class ContainerAllocator>
struct DataType< ::ramp_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ramp_msgs/Obstacle";
  }

  static const char* value(const ::ramp_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ramp_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ramp_msgs/MotionState ob_ms\n"
"geometry_msgs/Transform T_w_odom\n"
"\n"
"================================================================================\n"
"MSG: ramp_msgs/MotionState\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] jerks\n"
"\n"
"# change to duration\n"
"float64 time\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::ramp_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ramp_msgs::Obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ob_ms);
      stream.next(m.T_w_odom);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ramp_msgs::Obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ramp_msgs::Obstacle_<ContainerAllocator>& v)
  {
    s << indent << "ob_ms: ";
    s << std::endl;
    Printer< ::ramp_msgs::MotionState_<ContainerAllocator> >::stream(s, indent + "  ", v.ob_ms);
    s << indent << "T_w_odom: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.T_w_odom);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAMP_MSGS_MESSAGE_OBSTACLE_H
