// Generated by gencpp from file ramp_planner_new/CubicRepresentation.msg
// DO NOT EDIT!


#ifndef RAMP_PLANNER_NEW_MESSAGE_CUBICREPRESENTATION_H
#define RAMP_PLANNER_NEW_MESSAGE_CUBICREPRESENTATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ramp_planner_new/Coefficient.h>

namespace ramp_planner_new
{
template <class ContainerAllocator>
struct CubicRepresentation_
{
  typedef CubicRepresentation_<ContainerAllocator> Type;

  CubicRepresentation_()
    : order(0)
    , numDOF(0)
    , coefficients()
    , resolution(0.0)  {
    }
  CubicRepresentation_(const ContainerAllocator& _alloc)
    : order(0)
    , numDOF(0)
    , coefficients(_alloc)
    , resolution(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _order_type;
  _order_type order;

   typedef uint32_t _numDOF_type;
  _numDOF_type numDOF;

   typedef std::vector< ::ramp_planner_new::Coefficient_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ramp_planner_new::Coefficient_<ContainerAllocator> >::other >  _coefficients_type;
  _coefficients_type coefficients;

   typedef double _resolution_type;
  _resolution_type resolution;





  typedef boost::shared_ptr< ::ramp_planner_new::CubicRepresentation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ramp_planner_new::CubicRepresentation_<ContainerAllocator> const> ConstPtr;

}; // struct CubicRepresentation_

typedef ::ramp_planner_new::CubicRepresentation_<std::allocator<void> > CubicRepresentation;

typedef boost::shared_ptr< ::ramp_planner_new::CubicRepresentation > CubicRepresentationPtr;
typedef boost::shared_ptr< ::ramp_planner_new::CubicRepresentation const> CubicRepresentationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ramp_planner_new::CubicRepresentation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ramp_planner_new::CubicRepresentation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ramp_planner_new::CubicRepresentation_<ContainerAllocator1> & lhs, const ::ramp_planner_new::CubicRepresentation_<ContainerAllocator2> & rhs)
{
  return lhs.order == rhs.order &&
    lhs.numDOF == rhs.numDOF &&
    lhs.coefficients == rhs.coefficients &&
    lhs.resolution == rhs.resolution;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ramp_planner_new::CubicRepresentation_<ContainerAllocator1> & lhs, const ::ramp_planner_new::CubicRepresentation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ramp_planner_new

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ramp_planner_new::CubicRepresentation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ramp_planner_new::CubicRepresentation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_planner_new::CubicRepresentation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_planner_new::CubicRepresentation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_planner_new::CubicRepresentation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_planner_new::CubicRepresentation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ramp_planner_new::CubicRepresentation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d9f47ffad2b610ef10ede454a7dfa31";
  }

  static const char* value(const ::ramp_planner_new::CubicRepresentation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d9f47ffad2b610eULL;
  static const uint64_t static_value2 = 0xf10ede454a7dfa31ULL;
};

template<class ContainerAllocator>
struct DataType< ::ramp_planner_new::CubicRepresentation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ramp_planner_new/CubicRepresentation";
  }

  static const char* value(const ::ramp_planner_new::CubicRepresentation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ramp_planner_new::CubicRepresentation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 order\n"
"uint32 numDOF\n"
"ramp_planner_new/Coefficient[] coefficients\n"
"float64 resolution\n"
"================================================================================\n"
"MSG: ramp_planner_new/Coefficient\n"
"float64[] values\n"
;
  }

  static const char* value(const ::ramp_planner_new::CubicRepresentation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ramp_planner_new::CubicRepresentation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.order);
      stream.next(m.numDOF);
      stream.next(m.coefficients);
      stream.next(m.resolution);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CubicRepresentation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ramp_planner_new::CubicRepresentation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ramp_planner_new::CubicRepresentation_<ContainerAllocator>& v)
  {
    s << indent << "order: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.order);
    s << indent << "numDOF: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.numDOF);
    s << indent << "coefficients[]" << std::endl;
    for (size_t i = 0; i < v.coefficients.size(); ++i)
    {
      s << indent << "  coefficients[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ramp_planner_new::Coefficient_<ContainerAllocator> >::stream(s, indent + "    ", v.coefficients[i]);
    }
    s << indent << "resolution: ";
    Printer<double>::stream(s, indent + "  ", v.resolution);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAMP_PLANNER_NEW_MESSAGE_CUBICREPRESENTATION_H
