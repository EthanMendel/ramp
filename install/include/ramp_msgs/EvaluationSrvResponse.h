// Generated by gencpp from file ramp_msgs/EvaluationSrvResponse.msg
// DO NOT EDIT!


#ifndef RAMP_MSGS_MESSAGE_EVALUATIONSRVRESPONSE_H
#define RAMP_MSGS_MESSAGE_EVALUATIONSRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ramp_msgs/EvaluationResponse.h>

namespace ramp_msgs
{
template <class ContainerAllocator>
struct EvaluationSrvResponse_
{
  typedef EvaluationSrvResponse_<ContainerAllocator> Type;

  EvaluationSrvResponse_()
    : resps()  {
    }
  EvaluationSrvResponse_(const ContainerAllocator& _alloc)
    : resps(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> >::other >  _resps_type;
  _resps_type resps;





  typedef boost::shared_ptr< ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct EvaluationSrvResponse_

typedef ::ramp_msgs::EvaluationSrvResponse_<std::allocator<void> > EvaluationSrvResponse;

typedef boost::shared_ptr< ::ramp_msgs::EvaluationSrvResponse > EvaluationSrvResponsePtr;
typedef boost::shared_ptr< ::ramp_msgs::EvaluationSrvResponse const> EvaluationSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator1> & lhs, const ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.resps == rhs.resps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator1> & lhs, const ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ramp_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c511a6bddace16490772be119d9e7d0";
  }

  static const char* value(const ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c511a6bddace164ULL;
  static const uint64_t static_value2 = 0x90772be119d9e7d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ramp_msgs/EvaluationSrvResponse";
  }

  static const char* value(const ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"EvaluationResponse[] resps\n"
"\n"
"\n"
"================================================================================\n"
"MSG: ramp_msgs/EvaluationResponse\n"
"float64 fitness\n"
"bool feasible\n"
"duration t_firstCollision\n"
;
  }

  static const char* value(const ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.resps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EvaluationSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ramp_msgs::EvaluationSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "resps[]" << std::endl;
    for (size_t i = 0; i < v.resps.size(); ++i)
    {
      s << indent << "  resps[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> >::stream(s, indent + "    ", v.resps[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAMP_MSGS_MESSAGE_EVALUATIONSRVRESPONSE_H
